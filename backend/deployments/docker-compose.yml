
services:
  # Frontend service
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - webui-network

  api-gateway:
    build:
      context: ../api-gateway
      dockerfile: Dockerfile
    # Only expose to internal network, not to host
    expose:
      - "8000"
    environment:
      - INFERENCE_SERVICE_URL=http://inference-service:8001
      - AGENT_SERVICE_URL=http://agent-service:8002
      - RETRIEVAL_SERVICE_URL=http://retrieval-service:8003
      - CHAT_SERVICE_URL=http://chat-service:8004
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-30}
    depends_on:
      - inference-service
      - agent-service
      - retrieval-service
      - chat-service
    networks:
      - webui-network

  inference-service:
    build:
      context: ../inference-service
      dockerfile: Dockerfile
    expose:
      - "8001"
    environment:
      - ENABLE_OLLAMA_API=${ENABLE_OLLAMA_API:-true}
      - OLLAMA_BASE_URLS=${OLLAMA_BASE_URLS:-http://ollama:11434}
      - ENABLE_OPENAI_API=${ENABLE_OPENAI_API:-true}
      - OPENAI_API_BASE_URLS=${OPENAI_API_BASE_URLS:-https://api.openai.com/v1}
      - OPENAI_API_KEYS=${OPENAI_API_KEYS:-your-openai-api-key}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key}
    networks:
      - webui-network

  agent-service:
    build:
      context: ../agent-service
      dockerfile: Dockerfile
    expose:
      - "8002"
    environment:
      - ENABLE_CODE_EXECUTION=${ENABLE_CODE_EXECUTION:-false}
      - ENABLE_CODE_INTERPRETER=${ENABLE_CODE_INTERPRETER:-false}
      - ENABLE_TOOLS=${ENABLE_TOOLS:-true}
      - TASK_MODEL=${TASK_MODEL:-gpt-3.5-turbo}
      - INFERENCE_SERVICE_URL=http://inference-service:8001
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key}
    depends_on:
      - inference-service
    networks:
      - webui-network

  retrieval-service:
    build:
      context: ../retrieval-service
      dockerfile: Dockerfile
    expose:
      - "8003"
    environment:
      - VECTOR_DB=${VECTOR_DB:-chroma}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-all-MiniLM-L6-v2}
      - ENABLE_RAG_HYBRID_SEARCH=${ENABLE_RAG_HYBRID_SEARCH:-true}
      - ENABLE_RAG_LOCAL_WEB_FETCH=${ENABLE_RAG_LOCAL_WEB_FETCH:-true}
      - ENABLE_RAG_WEB_SEARCH=${ENABLE_RAG_WEB_SEARCH:-true}
      - RAG_WEB_SEARCH_ENGINE=${RAG_WEB_SEARCH_ENGINE:-duckduckgo}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key}
    volumes:
      - retrieval-data:/app/uploads
      - chroma-data:/app/chroma_db
    networks:
      - webui-network

  chat-service:
    build:
      context: ../chat-service
      dockerfile: Dockerfile
    expose:
      - "8004"
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/webui}
      - DATABASE_POOL_SIZE=${DATABASE_POOL_SIZE:-10}
      - ENABLE_CHAT_HISTORY=${ENABLE_CHAT_HISTORY:-true}
      - ENABLE_CHAT_TEMPLATES=${ENABLE_CHAT_TEMPLATES:-true}
      - ENABLE_CHAT_EXPORT=${ENABLE_CHAT_EXPORT:-true}
      - ENABLE_CHAT_SHARING=${ENABLE_CHAT_SHARING:-true}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key}
    depends_on:
      - postgres
    networks:
      - webui-network

  postgres:
    image: postgres:15-alpine
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-webui}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - webui-network

  ollama:
    image: ollama/ollama:latest
    expose:
      - "11434"
    volumes:
      - ollama-data:/root/.ollama
    networks:
      - webui-network

  # Nginx service for SSL termination and reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/certbot:/var/www/certbot:ro
    depends_on:
      - frontend
      - api-gateway
    networks:
      - webui-network

networks:
  webui-network:
    driver: bridge

volumes:
  postgres-data:
  retrieval-data:
  chroma-data:
  ollama-data:
