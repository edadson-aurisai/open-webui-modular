name: CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Lint frontend
        working-directory: frontend
        run: npm run lint
  
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest black isort
          find backend -name requirements.txt -exec pip install -r {} \;

      - name: Lint backend with flake8
        run: |
          flake8 backend --count --select=E9,F63,F7,F82 --show-source --statistics
  
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          find backend -name requirements.txt -exec pip install -r {} \;
          pip install pytest pytest-cov

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          JWT_SECRET_KEY: test-secret-key
          TESTING: "true"
        run: |
          cd backend
          python -m pytest */tests/ --cov=. --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          fail_ci_if_error: false

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Run unit tests
        working-directory: frontend
        run: npm run test:frontend

  docker-build:
    name: Test Docker Build
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: false
          load: true
          tags: open-webui/frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build API Gateway image
        uses: docker/build-push-action@v4
        with:
          context: ./backend/api-gateway
          push: false
          load: true  
          tags: open-webui/api-gateway:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build other microservices here (similar pattern)
      
      - name: Create test network
        run: docker network create test-network

      - name: Test frontend container
        run: |
          docker run -d --name frontend --network test-network -p 8080:80 open-webui/frontend:test
          sleep 5
          curl -s -o /dev/null -w "%{http_code}" http://localhost:8080 | grep -q "200"

  # This job runs only on main branch
  deploy:
    name: Deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      # Add your deployment steps here
      - name: Placeholder for deployment
        run: echo "Deployment would happen here" 